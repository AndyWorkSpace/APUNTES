Comentarios : // , /**/

Cada sentencias se termina con un ;

// Declarar variables
var ourName;

// para almacenar valores
var myVar;
myVar = 5 ;

Cuando las variables son declaradas y no son inicaizadas, tienen un valor de undefined

//Var y Let : Con let el reemplaso de variables muestra error si se fragmenta
let catName = "Oliver";
let catSound = "Meow!";

// variables const , es de solo lectura
Number 


a *= 3 , es igual a, a = a * 3;
a /= 5 , es igual a, a = a / 12;
let ourStr = "I come first. ";
ourStr += "I come second.";

const anAdjective = "awesome!";
let ourStr = "freeCodeCamp is ";
ourStr += anAdjective;

const sampleStr = "Alan said, \"Peter is learning JavaScript\"."; PARA USAR COMILLAS DENTRO DE UN TEXTO

\'	comilla simple
\"	comilla doble
\\	barra invertida
\n	línea nueva
\t	tabulador
\r	retorno del carro
\b	límite de palabra
\f	fuente de formulario

console.log("Alan Peter".length); Usamos length para calcular el tama;o de la cadena

*ARREGLOS*
const sandwich = ["peanut butter", "jelly", "bread"];

const array = [50, 60, 70];
console.log(array[0]);
const data = array[1];

const ourArray = [50, 40, 30];
ourArray[0] = 15;

const arr = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9],
  [[10, 11, 12], 13, 14]
];

const subarray = arr[3];
const nestedSubarray = arr[3][0];
const element = arr[3][0][1];

--------------
Una forma fácil de añadir datos al final de un arreglo es a través de la función push().
.push() toma uno o más parámetros y los "empuja" al final del arreglo.

const arr1 = [1, 2, 3];
arr1.push(4);

const arr2 = ["Stimpson", "J", "cat"];
arr2.push(["happy", "joy"]);
---------------

Otra manera de cambiar los datos en un arreglo es con la función .pop().
.pop() se utiliza para sacar un valor del final de un arreglo. Podemos almacenar este valor sacado asignándolo a una variable. En otras palabras, .pop() elimina el último elemento de un arreglo y devuelve ese elemento.

const threeArr = [1, 4, 6];
const oneDown = threeArr.pop();
console.log(oneDown);
console.log(threeArr);
-----------------

Ahí es donde entra .shift(). Funciona igual que .pop(), excepto que elimina el primer elemento en lugar del último.

const ourArray = ["Stimpson", "J", ["cat"]];
const removedFromOurArray = ourArray.shift();
-----------------

.unshift() funciona exactamente como .push(), pero en lugar de añadir el elemento al final del arreglo, unshift() añade el elemento al principio del arreglo.

const ourArray = ["Stimpson", "J", "cat"];
ourArray.shift();
ourArray.unshift("Happy");
------------------

* FUNCIONES *
 Este es un ejemplo de una función:

function functionName() {
  console.log("Hello World");
}
----------------------

const someVar = "Hat";

function myFun() {
  const someVar = "Head";
  return someVar;
}
-----------------------

if (num > 15) {
  return "Bigger than 15";
} else if (num < 5) {
  return "Smaller than 5";
} else {
  return "Between 5 and 15";
}
--------------------------

if (condition1) {
  statement1
} else if (condition2) {
  statement2
} else if (condition3) {
  statement3
. . .
} else {
  statementN
}
-----------------------------

switch (lowercaseLetter) {
  case "a":
    console.log("A");
    break;
  case "b":
    console.log("B");
    break;
}
---------------------------------

switch (num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  default:
    defaultStatement;
    break;
}
------------------------------------

OBJETOS

const dogs = {
  Fido: "Mutt",
  Hunter: "Doberman",
  Snoopie: "Beagle"
};

const myDog = "Hunter";
const myBreed = dogs[myDog];
console.log(myBreed);
----------------------------------------

Elimina propiedades en un objeto de JavaScript
delete ourDog.bark;

--------------------------------------------

Usa objetos para hacer búsquedas
const article = {
  "title": "How to create objects in JavaScript",
  "link": "https://www.freecodecamp.org/news/a-complete-guide-to-creating-objects-in-javascript-b0e2450655e8/",
  "author": "Kaashan Hussain",
  "language": "JavaScript",
  "tags": "TECHNOLOGY",
  "createdAt": "NOVEMBER 28, 2018"
};

const articleAuthor = article["author"];
const articleLink = article["link"];

const value = "title";
const valueLookup = article[value];
--------------------------------------------------

Verifica las propiedades de un objeto
const myObj = {
  top: "hat",
  bottom: "pants"
};

myObj.hasOwnProperty("top");
myObj.hasOwnProperty("middle");
--------------------------------------------------

Accede a objetos anidados
const ourStorage = {
  "desk": {
    "drawer": "stapler"
  },
  "cabinet": {
    "top drawer": { 
      "folder1": "a file",
      "folder2": "secrets"
    },
    "bottom drawer": "soda"
  }
};

ourStorage.cabinet["top drawer"].folder2;
ourStorage.desk.drawer;
-----------------------------------------------

const ourPets = [
  {
    animalType: "cat",
    names: [
      "Meowzer",
      "Fluffy",
      "Kit-Cat"
    ]
  },
  {
    animalType: "dog",
    names: [
      "Spot",
      "Bowser",
      "Frankie"
    ]
  }
];

ourPets[0].names[1];
ourPets[1].names[0];
-----------------------------------------------





